{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Subject, of, timer, combineLatest, Observable } from 'rxjs';\nimport { take, map, tap, startWith, switchMap, shareReplay } from 'rxjs/operators';\nfunction LoadingBarComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r2.diameter)(\"height\", ctx_r2.diameter);\n  }\n}\nfunction LoadingBarComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 5);\n  }\n  if (rf & 2) {\n    const progress_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background\", ctx_r3.color)(\"height\", ctx_r3.height)(\"width\", progress_r1 + \"%\");\n  }\n}\nfunction LoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, LoadingBarComponent_ng_container_0_div_1_Template, 2, 4, \"div\", 1);\n    i0.ɵɵtemplate(2, LoadingBarComponent_ng_container_0_div_2_Template, 1, 6, \"div\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.includeSpinner);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.includeBar);\n  }\n}\nclass LoadingBarState {\n  constructor(config = {}) {\n    this.config = config;\n    this.state = {\n      action: null,\n      value: 0,\n      initialValue: 0\n    };\n    this.requests = null;\n    this.disabled = false;\n    this.stream$ = new Subject();\n    this._value$ = null;\n    this.timer$ = s => {\n      let state$ = of(s);\n      switch (s.action) {\n        case 'start':\n        case 'increment':\n        case 'set':\n          {\n            if (s.action === 'start' && this.config.latencyThreshold === 0 && s.value === 0) {\n              s.value = s.initialValue;\n            }\n            if (this.requests > 0) {\n              state$ = timer(this.config.latencyThreshold, 250).pipe(map(t => ({\n                ...s,\n                value: t === 0 ? this.state.value || s.initialValue : this._increment()\n              })));\n            }\n            break;\n          }\n        case 'complete':\n        case 'stop':\n          {\n            // Attempt to aggregate any start/complete calls within 500ms:\n            state$ = s.value === 0 ? of({\n              ...s\n            }) : timer(0, 500).pipe(take(2), map(t => ({\n              value: t === 0 ? 100 : 0\n            })));\n            break;\n          }\n      }\n      return state$.pipe(map(next => ({\n        ...next,\n        action: 'set'\n      })), tap(next => this.next(next, false)));\n    };\n    this.config = {\n      latencyThreshold: 0,\n      ...config\n    };\n  }\n  get value$() {\n    if (this._value$) {\n      return this._value$;\n    }\n    return this._value$ = this.stream$.pipe(startWith(this.state), switchMap(s => this.timer$(s)), shareReplay(), map(s => s.value));\n  }\n  start(initialValue = 2) {\n    if (this.disabled) {\n      return;\n    }\n    this.next({\n      action: 'start',\n      initialValue\n    });\n  }\n  stop() {\n    this.next({\n      action: 'stop'\n    });\n  }\n  complete() {\n    this.next({\n      action: 'complete'\n    });\n  }\n  disable() {\n    this.disabled = true;\n  }\n  set(value) {\n    this.next({\n      action: 'set',\n      value\n    });\n  }\n  increment(value = 0) {\n    this.next({\n      action: 'increment',\n      value\n    });\n  }\n  next(state, emitEvent = true) {\n    switch (state.action) {\n      case 'start':\n        this.requests = (this.requests || 0) + 1;\n        break;\n      case 'complete':\n        this.requests = (this.requests || 1) - 1;\n        if (this.requests > 0) {\n          return;\n        }\n        break;\n      case 'stop':\n        this.requests = 0;\n        break;\n      case 'increment':\n        state.value = this._increment(state.value);\n        break;\n    }\n    this.state = {\n      ...this.state,\n      action: null,\n      ...state\n    };\n    if (emitEvent) {\n      this.stream$.next(this.state);\n    }\n  }\n  _increment(rnd = 0) {\n    const stat = this.state.value;\n    if (stat >= 99) {\n      rnd = 0;\n    }\n    if (rnd === 0) {\n      if (stat >= 0 && stat < 25) {\n        // Start out between 3 - 6% increments\n        rnd = Math.random() * (5 - 3 + 1) + 3;\n      } else if (stat >= 25 && stat < 65) {\n        // increment between 0 - 3%\n        rnd = Math.random() * 3;\n      } else if (stat >= 65 && stat < 90) {\n        // increment between 0 - 2%\n        rnd = Math.random() * 2;\n      } else if (stat >= 90 && stat < 99) {\n        // finally, increment it .5 %\n        rnd = 0.5;\n      } else {\n        // after 99%, don't increment:\n        rnd = 0;\n      }\n    }\n    return rnd + stat;\n  }\n}\nconst LOADING_BAR_CONFIG = new InjectionToken('LOADING_BAR_CONFIG');\nclass LoadingBarService {\n  constructor(platformId, config = {}, zone) {\n    this.platformId = platformId;\n    this.config = config;\n    this.zone = zone;\n    this.refs = {};\n    this.streams$ = new Subject();\n    this.value$ = this.streams$.pipe(startWith(null), switchMap(() => combineLatest(Object.keys(this.refs).map(s => this.refs[s].value$))), runInZone(this.zone), map(v => Math.max(0, ...v)));\n  }\n  /** @deprecated use `value$` instead. */\n  get progress$() {\n    return this.value$;\n  }\n  /** @deprecated use `useRef` instead. */\n  start(initialValue = 2) {\n    this.useRef().start(initialValue);\n  }\n  /** @deprecated use `useRef` instead. */\n  set(value) {\n    this.useRef().set(value);\n  }\n  /** @deprecated use `useRef` instead. */\n  increment(value) {\n    this.useRef().increment(value);\n  }\n  /** @deprecated use `useRef` instead. */\n  complete() {\n    this.useRef().complete();\n  }\n  /** @deprecated use `useRef` instead. */\n  stop() {\n    this.useRef().stop();\n  }\n  useRef(id = 'default') {\n    if (!this.refs[id]) {\n      this.refs[id] = new LoadingBarState(this.config);\n      this.streams$.next();\n      if (!isPlatformBrowser(this.platformId)) {\n        this.refs[id].disable();\n      }\n    }\n    return this.refs[id];\n  }\n}\nLoadingBarService.ɵfac = function LoadingBarService_Factory(t) {\n  return new (t || LoadingBarService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(LOADING_BAR_CONFIG, 8), i0.ɵɵinject(i0.NgZone, 8));\n};\nLoadingBarService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LoadingBarService,\n  factory: LoadingBarService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingBarService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LOADING_BAR_CONFIG]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n// https://stackoverflow.com/a/57452361/1406096\nfunction runInZone(zone) {\n  if (!zone) {\n    return source => source;\n  }\n  return source => new Observable(observer => source.subscribe(value => zone.run(() => observer.next(value)), e => zone.run(() => observer.error(e)), () => zone.run(() => observer.complete())));\n}\nclass LoadingBarComponent {\n  constructor(loader) {\n    this.loader = loader;\n    this.includeSpinner = true;\n    this.includeBar = true;\n    this.fixed = true;\n    this.color = '#29d';\n  }\n  get value$() {\n    return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n  }\n}\nLoadingBarComponent.ɵfac = function LoadingBarComponent_Factory(t) {\n  return new (t || LoadingBarComponent)(i0.ɵɵdirectiveInject(LoadingBarService));\n};\nLoadingBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LoadingBarComponent,\n  selectors: [[\"ngx-loading-bar\"]],\n  hostVars: 3,\n  hostBindings: function LoadingBarComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"fixed\", ctx.fixed);\n      i0.ɵɵstyleProp(\"color\", ctx.color);\n    }\n  },\n  inputs: {\n    includeSpinner: \"includeSpinner\",\n    includeBar: \"includeBar\",\n    fixed: \"fixed\",\n    color: \"color\",\n    value: \"value\",\n    ref: \"ref\",\n    height: \"height\",\n    diameter: \"diameter\"\n  },\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"class\", \"ngx-spinner\", 4, \"ngIf\"], [\"class\", \"ngx-bar\", 3, \"background\", \"height\", \"width\", 4, \"ngIf\"], [1, \"ngx-spinner\"], [1, \"ngx-spinner-icon\"], [1, \"ngx-bar\"]],\n  template: function LoadingBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoadingBarComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.value != null ? ctx.value : i0.ɵɵpipeBind1(1, 1, ctx.value$));\n    }\n  },\n  dependencies: [i2.NgIf, i2.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:block;pointer-events:none}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{transition:.35s linear all;display:block;position:absolute;top:5px;left:0px}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]   .ngx-spinner-icon[_ngcontent-%COMP%]{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:_ngcontent-%COMP%_loading-bar-spinner .4s linear infinite;animation:_ngcontent-%COMP%_loading-bar-spinner .4s linear infinite}[_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl]   [_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{right:0;left:unset}[fixed=true][_nghost-%COMP%]{z-index:10002}[fixed=true][_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{position:fixed}[fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{position:fixed;top:10px;left:10px}[dir=rtl]   [fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{right:10px;left:unset}@-webkit-keyframes _ngcontent-%COMP%_loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes _ngcontent-%COMP%_loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-loading-bar',\n      template: `\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  `,\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.Emulated,\n      host: {\n        '[attr.fixed]': 'fixed',\n        '[style.color]': 'color'\n      },\n      styles: [\":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:.35s linear all;display:block;position:absolute;top:5px;left:0px}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:loading-bar-spinner .4s linear infinite;animation:loading-bar-spinner .4s linear infinite}:host .ngx-bar{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: LoadingBarService\n    }];\n  }, {\n    includeSpinner: [{\n      type: Input\n    }],\n    includeBar: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ref: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }]\n  });\n})();\nclass LoadingBarModule {}\nLoadingBarModule.ɵfac = function LoadingBarModule_Factory(t) {\n  return new (t || LoadingBarModule)();\n};\nLoadingBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LoadingBarModule\n});\nLoadingBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [LoadingBarComponent],\n      exports: [LoadingBarComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LOADING_BAR_CONFIG, LoadingBarComponent, LoadingBarModule, LoadingBarService };","map":{"version":3,"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","NgModule","i2","isPlatformBrowser","CommonModule","Subject","of","timer","combineLatest","Observable","take","map","tap","startWith","switchMap","shareReplay","LoadingBarComponent_ng_container_0_div_1_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵstyleProp","diameter","LoadingBarComponent_ng_container_0_div_2_Template","progress_r1","ngIf","ctx_r3","color","height","LoadingBarComponent_ng_container_0_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","ctx_r0","ɵɵproperty","includeSpinner","includeBar","LoadingBarState","constructor","config","state","action","value","initialValue","requests","disabled","stream$","_value$","timer$","s","state$","latencyThreshold","pipe","t","_increment","next","value$","start","stop","complete","disable","set","increment","emitEvent","rnd","stat","Math","random","LOADING_BAR_CONFIG","LoadingBarService","platformId","zone","refs","streams$","Object","keys","runInZone","v","max","progress$","useRef","id","ɵfac","LoadingBarService_Factory","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","decorators","undefined","source","observer","subscribe","run","e","error","LoadingBarComponent","loader","fixed","ref","LoadingBarComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","hostVars","hostBindings","LoadingBarComponent_HostBindings","ɵɵattribute","inputs","decls","vars","consts","template","LoadingBarComponent_Template","ɵɵpipe","ɵɵpipeBind1","dependencies","NgIf","AsyncPipe","styles","changeDetection","selector","preserveWhitespaces","OnPush","encapsulation","Emulated","host","LoadingBarModule","LoadingBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["/Users/afcu/Documents/AngularPractice/AngularProjects/NewsApp/node_modules/@ngx-loading-bar/core/fesm2020/ngx-loading-bar-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Subject, of, timer, combineLatest, Observable } from 'rxjs';\nimport { take, map, tap, startWith, switchMap, shareReplay } from 'rxjs/operators';\n\nclass LoadingBarState {\n    constructor(config = {}) {\n        this.config = config;\n        this.state = {\n            action: null,\n            value: 0,\n            initialValue: 0,\n        };\n        this.requests = null;\n        this.disabled = false;\n        this.stream$ = new Subject();\n        this._value$ = null;\n        this.timer$ = (s) => {\n            let state$ = of(s);\n            switch (s.action) {\n                case 'start':\n                case 'increment':\n                case 'set': {\n                    if (s.action === 'start' && this.config.latencyThreshold === 0 && s.value === 0) {\n                        s.value = s.initialValue;\n                    }\n                    if (this.requests > 0) {\n                        state$ = timer(this.config.latencyThreshold, 250).pipe(map((t) => ({ ...s, value: t === 0 ? this.state.value || s.initialValue : this._increment() })));\n                    }\n                    break;\n                }\n                case 'complete':\n                case 'stop': {\n                    // Attempt to aggregate any start/complete calls within 500ms:\n                    state$ =\n                        s.value === 0\n                            ? of({ ...s })\n                            : timer(0, 500).pipe(take(2), map((t) => ({ value: t === 0 ? 100 : 0 })));\n                    break;\n                }\n            }\n            return state$.pipe(map((next) => ({ ...next, action: 'set' })), tap((next) => this.next(next, false)));\n        };\n        this.config = {\n            latencyThreshold: 0,\n            ...config,\n        };\n    }\n    get value$() {\n        if (this._value$) {\n            return this._value$;\n        }\n        return (this._value$ = this.stream$.pipe(startWith(this.state), switchMap((s) => this.timer$(s)), shareReplay(), map((s) => s.value)));\n    }\n    start(initialValue = 2) {\n        if (this.disabled) {\n            return;\n        }\n        this.next({ action: 'start', initialValue });\n    }\n    stop() {\n        this.next({ action: 'stop' });\n    }\n    complete() {\n        this.next({ action: 'complete' });\n    }\n    disable() {\n        this.disabled = true;\n    }\n    set(value) {\n        this.next({ action: 'set', value });\n    }\n    increment(value = 0) {\n        this.next({ action: 'increment', value });\n    }\n    next(state, emitEvent = true) {\n        switch (state.action) {\n            case 'start':\n                this.requests = (this.requests || 0) + 1;\n                break;\n            case 'complete':\n                this.requests = (this.requests || 1) - 1;\n                if (this.requests > 0) {\n                    return;\n                }\n                break;\n            case 'stop':\n                this.requests = 0;\n                break;\n            case 'increment':\n                state.value = this._increment(state.value);\n                break;\n        }\n        this.state = { ...this.state, action: null, ...state };\n        if (emitEvent) {\n            this.stream$.next(this.state);\n        }\n    }\n    _increment(rnd = 0) {\n        const stat = this.state.value;\n        if (stat >= 99) {\n            rnd = 0;\n        }\n        if (rnd === 0) {\n            if (stat >= 0 && stat < 25) {\n                // Start out between 3 - 6% increments\n                rnd = Math.random() * (5 - 3 + 1) + 3;\n            }\n            else if (stat >= 25 && stat < 65) {\n                // increment between 0 - 3%\n                rnd = Math.random() * 3;\n            }\n            else if (stat >= 65 && stat < 90) {\n                // increment between 0 - 2%\n                rnd = Math.random() * 2;\n            }\n            else if (stat >= 90 && stat < 99) {\n                // finally, increment it .5 %\n                rnd = 0.5;\n            }\n            else {\n                // after 99%, don't increment:\n                rnd = 0;\n            }\n        }\n        return rnd + stat;\n    }\n}\n\nconst LOADING_BAR_CONFIG = new InjectionToken('LOADING_BAR_CONFIG');\n\nclass LoadingBarService {\n    constructor(platformId, config = {}, zone) {\n        this.platformId = platformId;\n        this.config = config;\n        this.zone = zone;\n        this.refs = {};\n        this.streams$ = new Subject();\n        this.value$ = this.streams$.pipe(startWith(null), switchMap(() => combineLatest(Object.keys(this.refs).map((s) => this.refs[s].value$))), runInZone(this.zone), map((v) => Math.max(0, ...v)));\n    }\n    /** @deprecated use `value$` instead. */\n    get progress$() {\n        return this.value$;\n    }\n    /** @deprecated use `useRef` instead. */\n    start(initialValue = 2) {\n        this.useRef().start(initialValue);\n    }\n    /** @deprecated use `useRef` instead. */\n    set(value) {\n        this.useRef().set(value);\n    }\n    /** @deprecated use `useRef` instead. */\n    increment(value) {\n        this.useRef().increment(value);\n    }\n    /** @deprecated use `useRef` instead. */\n    complete() {\n        this.useRef().complete();\n    }\n    /** @deprecated use `useRef` instead. */\n    stop() {\n        this.useRef().stop();\n    }\n    useRef(id = 'default') {\n        if (!this.refs[id]) {\n            this.refs[id] = new LoadingBarState(this.config);\n            this.streams$.next();\n            if (!isPlatformBrowser(this.platformId)) {\n                this.refs[id].disable();\n            }\n        }\n        return this.refs[id];\n    }\n}\nLoadingBarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarService, deps: [{ token: PLATFORM_ID }, { token: LOADING_BAR_CONFIG, optional: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nLoadingBarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [LOADING_BAR_CONFIG]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n// https://stackoverflow.com/a/57452361/1406096\nfunction runInZone(zone) {\n    if (!zone) {\n        return (source) => source;\n    }\n    return (source) => new Observable((observer) => source.subscribe((value) => zone.run(() => observer.next(value)), (e) => zone.run(() => observer.error(e)), () => zone.run(() => observer.complete())));\n}\n\nclass LoadingBarComponent {\n    constructor(loader) {\n        this.loader = loader;\n        this.includeSpinner = true;\n        this.includeBar = true;\n        this.fixed = true;\n        this.color = '#29d';\n    }\n    get value$() {\n        return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n    }\n}\nLoadingBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarComponent, deps: [{ token: LoadingBarService }], target: i0.ɵɵFactoryTarget.Component });\nLoadingBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: LoadingBarComponent, selector: \"ngx-loading-bar\", inputs: { includeSpinner: \"includeSpinner\", includeBar: \"includeBar\", fixed: \"fixed\", color: \"color\", value: \"value\", ref: \"ref\", height: \"height\", diameter: \"diameter\" }, host: { properties: { \"attr.fixed\": \"fixed\", \"style.color\": \"color\" } }, ngImport: i0, template: `\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  `, isInline: true, styles: [\":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:.35s linear all;display:block;position:absolute;top:5px;left:0px}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:loading-bar-spinner .4s linear infinite;animation:loading-bar-spinner .4s linear infinite}:host .ngx-bar{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-loading-bar', template: `\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  `, preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.Emulated, host: {\n                        '[attr.fixed]': 'fixed',\n                        '[style.color]': 'color',\n                    }, styles: [\":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:.35s linear all;display:block;position:absolute;top:5px;left:0px}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:solid 2px transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:loading-bar-spinner .4s linear infinite;animation:loading-bar-spinner .4s linear infinite}:host .ngx-bar{transition:width .35s;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: LoadingBarService }]; }, propDecorators: { includeSpinner: [{\n                type: Input\n            }], includeBar: [{\n                type: Input\n            }], fixed: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ref: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], diameter: [{\n                type: Input\n            }] } });\n\nclass LoadingBarModule {\n}\nLoadingBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLoadingBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarModule, declarations: [LoadingBarComponent], imports: [CommonModule], exports: [LoadingBarComponent] });\nLoadingBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LoadingBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [LoadingBarComponent],\n                    exports: [LoadingBarComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LOADING_BAR_CONFIG, LoadingBarComponent, LoadingBarModule, LoadingBarService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}